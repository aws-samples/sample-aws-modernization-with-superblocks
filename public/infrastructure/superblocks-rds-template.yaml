AWSTemplateFormatVersion: '2010-09-09'
Description: RDS PostgreSQL instance in default VPC

Resources:
  RDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-rds-credentials'
      Description: 'Secret for RDS database credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true
        ExcludeCharacters: '"@/\$%^&*()_+<>?:{}[]~`|='

  # Default VPC Lookup Lambda
  DefaultVPCLookupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DefaultVPCLookupLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      ec2 = boto3.client('ec2')
                      
                      # Get default VPC
                      response = ec2.describe_vpcs(
                          Filters=[{'Name': 'isDefault', 'Values': ['true']}]
                      )
                      
                      if not response['Vpcs']:
                          cfnresponse.send(event, context, cfnresponse.FAILED, 
                                         {'Error': 'No default VPC found'})
                          return
                          
                      vpc_id = response['Vpcs'][0]['VpcId']
                      vpc_cidr = response['Vpcs'][0]['CidrBlock']
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                     {'VpcId': vpc_id, 'CidrBlock': vpc_cidr})
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, 
                                     {'Error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.9
      Timeout: 30
      Architectures:
        - arm64

  DefaultVPCLookupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeVPCs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                Resource: '*'

  # Default VPC Lookup
  DefaultVPCLookup:
    Type: Custom::DefaultVPCLookup
    Properties:
      ServiceToken: !GetAtt DefaultVPCLookupLambda.Arn

  # Lambda to find default VPC subnets
  DefaultVPCSubnetsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DefaultVPCSubnetsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      ec2 = boto3.client('ec2')
                      vpc_id = event['ResourceProperties']['VpcId']
                      
                      # Get all subnets in the VPC
                      response = ec2.describe_subnets(
                          Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}]
                      )
                      
                      subnet_ids = [subnet['SubnetId'] for subnet in response['Subnets']]
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                     {'SubnetIds': subnet_ids})
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, 
                                     {'Error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.9
      Timeout: 30
      Architectures:
        - arm64

  DefaultVPCSubnetsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeSubnets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:DescribeSubnets
                Resource: '*'

  DefaultVPCSubnets:
    Type: Custom::DefaultVPCSubnets
    Properties:
      ServiceToken: !GetAtt DefaultVPCSubnetsLambda.Arn
      VpcId: !GetAtt DefaultVPCLookup.VpcId

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !GetAtt DefaultVPCLookup.VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !GetAtt DefaultVPCLookup.CidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !GetAtt DefaultVPCLookup.CidrBlock

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS using default VPC subnets
      SubnetIds: !GetAtt DefaultVPCSubnets.SubnetIds

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: employees
      Engine: postgres
      EngineVersion: 16.3
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 1
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageEncrypted: true
      DeletionProtection: true
      Tags:
        - Key: Name
          Value: Employees-DB

  StoreDBEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rds/db-endpoint
      Type: String
      Value: !GetAtt RDSInstance.Endpoint.Address

  StoreDBUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rds/db-username
      Type: String
      Value: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]

  StoreDBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rds/db-password
      Type: String
      Value: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
  
  StoreConnectionStringParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rds/connection-string
      Type: String
      Value: !Sub 
        - 'postgresql://${Username}:${Password}@${RDSInstance.Endpoint.Address}:5432/employees'
        - Username: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
          Password: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]

Outputs:
  DBEndpoint:
    Description: The database endpoint.
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: RDS-DBEndpoint

  DBSecretArn:
    Description: The ARN of the database credentials secret
    Value: !Ref RDSSecret
    Export:
      Name: RDS-SecretArn

  ConnectionString:
    Description: PostgreSQL connection string.
    Value: !Sub 
      - 'postgresql://${Username}:${Password}@${RDSInstance.Endpoint.Address}:5432/employees'
      - Username: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
    Export:
      Name: RDS-ConnectionString