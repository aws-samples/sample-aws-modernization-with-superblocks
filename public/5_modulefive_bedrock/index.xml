<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Integrating with AWS Bedrock on English</title>
    <link>//localhost:62373/5_modulefive_bedrock.html</link>
    <description>Recent content in Integrating with AWS Bedrock on English</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="//localhost:62373/5_modulefive_bedrock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up AWS Bedrock</title>
      <link>//localhost:62373/5_modulefive_bedrock/01_setupbedrock.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/01_setupbedrock.html</guid>
      <description>&lt;h2 id=&#34;configuring-aws-bedrock-in-superblocks-&#34;&gt;Configuring AWS Bedrock in Superblocks üîå&lt;/h2&gt;&#xA;&lt;p&gt;Superblocks makes it remarkably simple to integrate with AWS Bedrock. In this section, we&amp;rsquo;ll configure the connection between your Superblocks application and AWS Bedrock.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-configure-aws&#34;&gt;Step 1: Configure AWS&lt;/h3&gt;&#xA;&lt;!-- First, we need to set up the AWS credentials that will allow Superblocks to access Bedrock:&#xA;&#xA;1. In your Superblocks workspace, navigate to **Settings &gt; Integrations**&#xA;2. Click on **+ Add Integration** and select **AWS**&#xA;3. Enter a name for your integration (e.g., &#34;AWS-Bedrock&#34;)&#xA;4. Enter your AWS credentials:&#xA;   - AWS Access Key ID&#xA;   - AWS Secret Access Key&#xA;   - AWS Region (choose a region where Bedrock is available, such as `us-east-1`)&#xA;5. Click **Test Connection** to verify your credentials work&#xA;6. Click **Save** to store your integration&#xA;&#xA;:::alert{header=&#34;Tip&#34; type=&#34;info&#34;}&#xA;For production environments, we recommend using IAM roles with appropriate permissions rather than access keys. For this workshop, we&#39;re using access keys for simplicity.&#xA;:::&#xA;&#xA;### Step 2: Create a Bedrock Resource üß©&#xA;&#xA;Now, let&#39;s create a Bedrock resource in Superblocks:&#xA;&#xA;1. Navigate to **Resources** in the left sidebar&#xA;2. Click **+ Create Resource** and select **AWS Bedrock**&#xA;3. Enter a name for your resource (e.g., &#34;InventoryAnalysis&#34;)&#xA;4. Select the AWS integration you created in the previous step&#xA;5. Choose the foundation model you want to use:&#xA;   - For text analysis: **Claude 3 Sonnet**&#xA;   - For image generation: **Stable Diffusion XL**&#xA;6. Click **Create Resource**&#xA;&#xA;::alert[Different foundation models excel at different tasks. Claude models are excellent for text analysis and reasoning, while Stable Diffusion excels at image generation. Choose the appropriate model for your specific use case.]{header=&#34;Note&#34;}&#xA;&#xA;### Step 3: Test Your Bedrock Connection ‚úÖ&#xA;&#xA;Let&#39;s verify that your Bedrock connection is working:&#xA;&#xA;1. Navigate to **API Builder** in the left sidebar&#xA;2. Click **+ Create API** and select **HTTP API**&#xA;3. Name your API &#34;BedrockTest&#34;&#xA;4. Add a new step and select **AWS Bedrock**&#xA;5. Configure the step:&#xA;   - Select your Bedrock resource&#xA;   - Choose &#34;Text&#34; as the input type&#xA;   - Enter the following prompt: &#34;Summarize the benefits of AI for inventory management in 3 bullet points&#34;&#xA;6. Click **Test** to run the API&#xA;7. You should see a response from the model with 3 bullet points about inventory management&#xA;&#xA;::alert[Congratulations! You&#39;ve successfully connected Superblocks to AWS Bedrock. In the next section, we&#39;ll build a more sophisticated feature using this integration.]{header=&#34;Success&#34; type=&#34;success&#34;}&#xA;&#xA;![Bedrock Test Response](/images/bedrock-test-response.png) --&gt;</description>
    </item>
    <item>
      <title>Inventory Analysis with Bedrock</title>
      <link>//localhost:62373/5_modulefive_bedrock/02_inventoryanalysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/02_inventoryanalysis.html</guid>
      <description>&lt;h2 id=&#34;building-an-inventory-analysis-feature-&#34;&gt;Building an Inventory Analysis Feature üì¶&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have our Bedrock connection set up, let&amp;rsquo;s create a powerful inventory analysis feature that can provide insights about current inventory levels, identify potential stockouts, and recommend transfering strategies.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-create-the-inventory-analysis-api-&#34;&gt;Step 1: Create the Inventory Analysis API üîç&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;API Builder&lt;/strong&gt; in the left sidebar&lt;/li&gt;&#xA;&lt;li&gt;Open the API Builder Tool (CMD/CTRL + U)&lt;/li&gt;&#xA;&lt;li&gt;Search for the integration to your database (AWS RDS if applicable)&lt;/li&gt;&#xA;&lt;li&gt;Name your API &amp;ldquo;generate_insights&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Add the below SQL and rename the step to &amp;ldquo;get_input_data&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.inventory_id, ils.sku, ils.product_name, ils.category_name,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.location_name, ils.current_stock, ils.reorder_point,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.stock_margin, ils.stock_status,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sv.daily_velocity, po.total_quantity_ordered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.inventory_location_status ils&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; dm_operations.sales_velocity sv &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; ils.inventory_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sv.inventory_id &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; ils.location_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sv.location_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; dm_operations.pending_orders po &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; ils.inventory_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po.inventory_id &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; ils.location_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po.location_name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;Underneath the first step, add a new Python step&lt;/li&gt;&#xA;&lt;li&gt;Add the below Python code to limit the input data size and rename the step to &amp;ldquo;simplify_input_data&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_data_for_llm&lt;/span&gt;(input_data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert JSON object to a formatted string representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(input_data, (dict, list)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a nicely formatted string with indentation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        formatted_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(input_data, indent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Truncate if too large&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(formatted_string) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; max_chars:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            formatted_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; formatted_string[:max_chars] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...(truncated)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; formatted_string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prepare_data_for_llm(get_input_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;&#xA;&lt;li&gt;Add an additional Python step and the below code to call AWS Bedrock&lt;/li&gt;&#xA;&lt;li&gt;Rename the step to &amp;ldquo;send_to_bedrock&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_to_bedrock&lt;/span&gt;(text_data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Truncate data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text_data[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Create client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        service_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bedrock-runtime&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        region_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_region,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aws_access_key_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_access_key,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aws_secret_access_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_secret_key,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Create prompt as a message&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prompt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Analyze this inventory data: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;text_data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Give me 3 inventory transfer recommendations across 3 different locations with:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Product name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - From location&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - To location&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Quantity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Priority score (0-100)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Cost savings&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Reasoning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Analysis points (demand, cost, impact)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Make sure to the reasoning is informative and not a generic statement. The reasoning should be different for each recommendation. Do not restate the analysis points in the response and can include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      information on forecased demand in rationale. Return as a JSON array.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Make request with content as an array&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invoke_model(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modelId&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amazon.nova-lite-v1:0&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;messages&amp;#34;&lt;/span&gt;: [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: prompt}]}]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        contentType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        accept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Parse the response&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Check response structure and extract accordingly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response_body &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isinstance(response_body[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;], list):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_body[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Fallback if response format is different&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(response_body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt;: output}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; send_to_bedrock(simplify_input_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;Add a 4th and final Python step with the below code, and rename it to &amp;ldquo;format_output&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_text_recommendations&lt;/span&gt;(raw_output):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Get the raw output string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(raw_output, dict) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_output:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_output[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(raw_output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Extract the JSON array from the code block using regex&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        json_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;```json\s*\n(.*?)\n\s*```&amp;#34;&lt;/span&gt;, text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; json_match:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json_match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Parse the extracted JSON directly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# If we can&amp;#39;t find a code block, try to parse the nested structure&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# First convert single quotes to double quotes for proper JSON parsing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# But be careful with nested quotes in the JSON content&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#39;&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# This is a Python dict representation, not valid JSON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Use ast.literal_eval which is safer than eval&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ast&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;literal_eval(text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Navigate through the nested structure&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isinstance(message[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;], list):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    content_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# Extract JSON from code block&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    json_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;```json\s*\n(.*?)\n\s*```&amp;#34;&lt;/span&gt;, content_text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; json_match:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json_match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# If all else fails, run the original regex pattern&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d+)\.\s+Product name:\s+(.*?)\nFrom location:\s+(.*?)\nTo location:\s+(.*?)\nQuantity:\s+(.*?)\nPriority score.*?:\s+(.*?)\nCost savings:\s+(.*?)\nReasoning:\s+(.*?)(?=\n\n\d+\.|\n\nPlease|\Z)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        matches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(pattern, text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matches:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; matches:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from_location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to_location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cost_savings&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reasoning&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# Try to convert numeric fields&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(recommendation)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not parse recommendations from output&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_output&amp;#34;&lt;/span&gt;: text,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Custom extraction as a last resort&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Direct extraction of the JSON array from the text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            start_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n  {&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            end_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n```&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; start_idx &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; end_idx &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text[start_idx : end_idx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# Replace escaped characters&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    json_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: str(e), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_output&amp;#34;&lt;/span&gt;: raw_output}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function with the Bedrock output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;raw_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_to_bedrock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parse_text_recommendations(raw_output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save your API&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;::alert[When crafting prompts for foundation models, be specific about the format and type of analysis you want. This helps ensure consistent, useful responses.]{header=&amp;ldquo;Tip&amp;rdquo; type=&amp;ldquo;info&amp;rdquo;}&lt;/p&gt;</description>
    </item>
    <item>
      <title>UI Component for Inventory Analysis</title>
      <link>//localhost:62373/5_modulefive_bedrock/03_uiforanalysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/03_uiforanalysis.html</guid>
      <description>&lt;h2 id=&#34;create-a-ui-component-for-the-analysis-&#34;&gt;Create a UI Component for the Analysis üñ•Ô∏è&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have our Bedrock connection set up, let&amp;rsquo;s create a powerful inventory analysis feature that can provide insights about current inventory levels, identify potential stockouts, and recommend transfering strategies.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-create-a-ui-component-for-the-analysis-&#34;&gt;Step 1: Create a UI Component for the Analysis üñ•Ô∏è&lt;/h3&gt;&#xA;&lt;p&gt;Now, let&amp;rsquo;s create a UI component to display the inventory analysis:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;UI Builder&lt;/strong&gt; in the left sidebar&lt;/li&gt;&#xA;&lt;li&gt;Open your dashboard page&lt;/li&gt;&#xA;&lt;li&gt;Add a new container to your dashboard&lt;/li&gt;&#xA;&lt;li&gt;Add a heading component with the text &amp;ldquo;Inventory Analysis&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Add a button component labeled &amp;ldquo;Analyze Inventory&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Configure the button&amp;rsquo;s onClick event:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select &amp;ldquo;Run API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Choose your &amp;ldquo;InventoryAnalysis&amp;rdquo; API&lt;/li&gt;&#xA;&lt;li&gt;For the success action, select &amp;ldquo;Update State&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set the state key to &amp;ldquo;inventoryAnalysis&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add a text component below the button&lt;/li&gt;&#xA;&lt;li&gt;Configure the text component to display the analysis:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set the content to &lt;code&gt;{{state.inventoryAnalysis.steps.AnalyzeInventory.body}}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Enable markdown rendering&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add a loading state to improve user experience&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;::alert[Superblocks&amp;rsquo; state management system makes it easy to store and display API results. The state is reactive, so your UI will automatically update when the data changes.]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Natural Language Queries</title>
      <link>//localhost:62373/5_modulefive_bedrock/04_naturallanguagequeries.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/04_naturallanguagequeries.html</guid>
      <description>&lt;h2 id=&#34;building-a-natural-language-query-interface-&#34;&gt;Building a Natural Language Query Interface üí¨&lt;/h2&gt;&#xA;&lt;!-- One of the most powerful capabilities of AWS Bedrock is its ability to understand and process natural language. In this section, we&#39;ll create a natural language query interface that allows users to ask questions about their sales data in plain English.&#xA;&#xA;### Step 1: Create the Natural Language Query API üîç&#xA;&#xA;1. Navigate to **API Builder** in the left sidebar&#xA;2. Click **+ Create API** and select **HTTP API**&#xA;3. Name your API &#34;NaturalLanguageQuery&#34;&#xA;4. Add a parameter called &#34;userQuery&#34; of type &#34;string&#34;&#xA;5. Add a step and select **AWS Bedrock**&#xA;6. Configure the step:&#xA;   - Select your Bedrock resource&#xA;   - Choose &#34;Text&#34; as the input type&#xA;   - For the prompt, we&#39;ll create a system that translates natural language to SQL:&#xA;&#xA;```&#xA;You are an expert SQL translator. Your job is to convert natural language questions about sales data into SQL queries.&#xA;&#xA;The database has the following schema:&#xA;- sales(id, date, product_id, customer_id, quantity, unit_price, total_price)&#xA;- products(id, name, category, supplier_id, cost_price)&#xA;- customers(id, name, region, segment)&#xA;&#xA;Convert the following question into a SQL query:&#xA;{{params.userQuery}}&#xA;&#xA;Return ONLY the SQL query without any explanation or additional text.&#xA;```&#xA;&#xA;7. Name this step &#34;TranslateToSQL&#34;&#xA;8. Add another step and select **Data Source Query**&#xA;9. Configure the step:&#xA;   - Select your database resource&#xA;   - For the query, use the output from the previous step:&#xA;   - Set the query to `{{steps.TranslateToSQL.body}}`&#xA;10. Name this step &#34;ExecuteQuery&#34;&#xA;11. Add a final step using **AWS Bedrock**&#xA;12. Configure the step:&#xA;   - Select your Bedrock resource&#xA;   - Choose &#34;Text&#34; as the input type&#xA;   - For the prompt, we&#39;ll ask Bedrock to explain the results:&#xA;&#xA;```&#xA;You are a sales data analyst. Explain the following query results in a clear, concise way that highlights the most important insights. The original question was: &#34;{{params.userQuery}}&#34;&#xA;&#xA;Here are the query results:&#xA;{{steps.ExecuteQuery.body}}&#xA;&#xA;Provide your explanation in markdown format with appropriate headings and bullet points.&#xA;```&#xA;&#xA;13. Name this step &#34;ExplainResults&#34;&#xA;14. Click **Save** to save your API&#xA;&#xA;::alert[This multi-step approach demonstrates the power of chaining AI capabilities: first translating natural language to SQL, then executing the query, and finally explaining the results in human-friendly terms.]{header=&#34;Note&#34;}&#xA;&#xA;### Step 2: Create the Natural Language Interface üñ•Ô∏è&#xA;&#xA;Now, let&#39;s create a user interface for the natural language query feature:&#xA;&#xA;1. Navigate to **UI Builder** in the left sidebar&#xA;2. Open your dashboard page or create a new page&#xA;3. Add a new container with a heading &#34;Ask Questions About Your Sales Data&#34;&#xA;4. Add a text input component with placeholder text &#34;e.g., What were our top 5 selling products last month?&#34;&#xA;5. Add a button labeled &#34;Ask&#34;&#xA;6. Configure the button&#39;s onClick event:&#xA;   - Select &#34;Run API&#34;&#xA;   - Choose your &#34;NaturalLanguageQuery&#34; API&#xA;   - Set the userQuery parameter to the text input value&#xA;   - For the success action, select &#34;Update State&#34;&#xA;   - Set the state key to &#34;queryResults&#34;&#xA;7. Add a container below to display results&#xA;8. Add a text component to show the SQL query:&#xA;   - Set the content to `SQL Query: {{state.queryResults.steps.TranslateToSQL.body}}`&#xA;   - Style as code block&#xA;9. Add a data table component to show the raw results:&#xA;   - Set the data source to `{{state.queryResults.steps.ExecuteQuery.body}}`&#xA;10. Add a text component to show the explanation:&#xA;    - Set the content to `{{state.queryResults.steps.ExplainResults.body}}`&#xA;    - Enable markdown rendering&#xA;11. Add appropriate loading states and error handling&#xA;&#xA;::alert[Consider adding error handling for cases where the AI generates invalid SQL. You can add a try/catch in a JavaScript step to validate the SQL before executing it.]{header=&#34;Tip&#34; type=&#34;info&#34;}&#xA;&#xA;### Step 3: Test Your Natural Language Query Interface ‚úÖ&#xA;&#xA;1. Preview your application&#xA;2. Enter a question like &#34;What were our top 5 selling products last month?&#34;&#xA;3. Click &#34;Ask&#34;&#xA;4. Observe how the system:&#xA;   - Translates your question to SQL&#xA;   - Executes the query against your database&#xA;   - Provides a human-readable explanation of the results&#xA;&#xA;### Step 4: Enhance with Follow-up Questions üîÑ&#xA;&#xA;To make the interface more conversational, let&#39;s add support for follow-up questions:&#xA;&#xA;1. Add a state variable to store conversation history&#xA;2. Modify your API to include previous questions and answers&#xA;3. Add a &#34;Follow-up&#34; button that appears after the first question&#xA;4. Update the prompt to include context from previous interactions&#xA;&#xA;::alert[This natural language query interface demonstrates how AWS Bedrock and Superblocks can work together to create intuitive, powerful data exploration tools that don&#39;t require technical expertise to use.]{header=&#34;Success&#34; type=&#34;success&#34;}&#xA;&#xA;![Natural Language Query Interface](/images/nl-query-interface.png) --&gt;</description>
    </item>
    <item>
      <title>Conversational Assistant</title>
      <link>//localhost:62373/5_modulefive_bedrock/05_conversationalassistant.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/05_conversationalassistant.html</guid>
      <description>&lt;h2 id=&#34;building-a-conversational-business-assistant-&#34;&gt;Building a Conversational Business Assistant ü§ñ&lt;/h2&gt;&#xA;&lt;!-- In this final section, we&#39;ll create a conversational assistant that can help users interact with their business data through natural dialogue. This assistant will leverage AWS Bedrock&#39;s language capabilities to understand context, answer questions, and provide insights.&#xA;&#xA;### Step 1: Create the Conversational Assistant API üîç&#xA;&#xA;1. Navigate to **API Builder** in the left sidebar&#xA;2. Click **+ Create API** and select **HTTP API**&#xA;3. Name your API &#34;BusinessAssistant&#34;&#xA;4. Add a parameter called &#34;userMessage&#34; of type &#34;string&#34;&#xA;5. Add a parameter called &#34;conversationHistory&#34; of type &#34;array&#34; (optional)&#xA;6. Add a step and select **AWS Bedrock**&#xA;7. Configure the step:&#xA;   - Select your Bedrock resource&#xA;   - Choose &#34;Text&#34; as the input type&#xA;   - For the prompt, we&#39;ll create a system message that defines the assistant&#39;s capabilities:&#xA;&#xA;```&#xA;You are a helpful business assistant for a retail company. You can help with inventory management, sales analysis, and customer insights. You have access to the following data:&#xA;&#xA;1. Inventory data: product names, categories, current stock levels, reorder points&#xA;2. Sales data: daily sales by product, region, and customer segment&#xA;3. Customer data: customer segments, purchase history, and preferences&#xA;&#xA;When asked about specific data, respond as if you have access to this information and provide insights based on it. Keep your responses concise, professional, and focused on business value.&#xA;&#xA;{{#if params.conversationHistory}}&#xA;Previous conversation:&#xA;{{params.conversationHistory}}&#xA;{{/if}}&#xA;&#xA;User: {{params.userMessage}}&#xA;Assistant:&#xA;```&#xA;&#xA;8. Name this step &#34;GenerateResponse&#34;&#xA;9. Click **Save** to save your API&#xA;&#xA;::alert[The system message is crucial for defining the assistant&#39;s personality, capabilities, and constraints. A well-crafted system message ensures the assistant provides relevant, helpful responses.]{header=&#34;Info&#34;}&#xA;&#xA;### Step 2: Create the Conversational Interface üí¨&#xA;&#xA;Now, let&#39;s create a user interface for the conversational assistant:&#xA;&#xA;1. Navigate to **UI Builder** in the left sidebar&#xA;2. Create a new page called &#34;Business Assistant&#34;&#xA;3. Design a chat-like interface:&#xA;   - Add a container that takes up most of the page&#xA;   - Style it to look like a chat window&#xA;   - Add a state variable called &#34;messages&#34; initialized as an empty array&#xA;4. Add a text input at the bottom of the page with a send button&#xA;5. Configure the send button&#39;s onClick event:&#xA;   - Get the current message from the text input&#xA;   - Update the &#34;messages&#34; state to add the user message&#xA;   - Clear the text input&#xA;   - Run the &#34;BusinessAssistant&#34; API with:&#xA;     - userMessage: the current message&#xA;     - conversationHistory: formatted previous messages&#xA;   - On success, update the &#34;messages&#34; state to add the assistant&#39;s response&#xA;6. Create a component to render each message in the chat:&#xA;   - Different styling for user vs. assistant messages&#xA;   - Support for markdown in assistant responses&#xA;   - Timestamps for each message&#xA;7. Add a &#34;Clear Conversation&#34; button that resets the messages state&#xA;&#xA;::alert[To improve the user experience, add a typing indicator while waiting for the assistant&#39;s response. This provides visual feedback that the system is processing the request.]{header=&#34;Tip&#34; type=&#34;info&#34;}&#xA;&#xA;### Step 3: Enhance the Assistant with Data Integration üìä&#xA;&#xA;To make the assistant more useful, let&#39;s integrate it with real data:&#xA;&#xA;1. Modify the BusinessAssistant API to detect when the user is asking for specific data&#xA;2. Add conditional steps that query the database when relevant&#xA;3. Include the query results in the prompt to Bedrock&#xA;4. Update the UI to display charts or tables when appropriate&#xA;&#xA;For example, if the user asks &#34;How are sales trending this month?&#34;, the API should:&#xA;1. Detect this is a sales trend question&#xA;2. Query the sales data for the current month&#xA;3. Include this data in the prompt to Bedrock&#xA;4. Generate a response that references the actual data&#xA;&#xA;::alert[This approach combines the best of both worlds: the conversational abilities of foundation models and the accuracy of querying actual business data.]{header=&#34;Note&#34;}&#xA;&#xA;### Step 4: Test Your Conversational Assistant ‚úÖ&#xA;&#xA;1. Preview your application&#xA;2. Start a conversation with questions like:&#xA;   - &#34;Which products are running low on inventory?&#34;&#xA;   - &#34;How are sales performing compared to last month?&#34;&#xA;   - &#34;What are our top-selling products in the West region?&#34;&#xA;3. Observe how the assistant:&#xA;   - Maintains context throughout the conversation&#xA;   - Provides relevant business insights&#xA;   - Formats responses in a readable way&#xA;&#xA;::alert[This conversational assistant demonstrates how AWS Bedrock and Superblocks can work together to create intuitive interfaces for business data that feel natural and helpful.]{header=&#34;Success&#34; type=&#34;success&#34;}&#xA;&#xA;![Conversational Business Assistant](/images/business-assistant.png) --&gt;</description>
    </item>
    <item>
      <title>Predictive Analytics</title>
      <link>//localhost:62373/5_modulefive_bedrock/06_predictiveanalytics.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/06_predictiveanalytics.html</guid>
      <description>&lt;h2 id=&#34;implementing-predictive-analytics-for-inventory-&#34;&gt;Implementing Predictive Analytics for Inventory üîÆ&lt;/h2&gt;&#xA;&lt;!-- In this section, we&#39;ll use AWS Bedrock to implement predictive analytics for inventory management. This feature will help businesses anticipate future inventory needs based on historical data and trends.&#xA;&#xA;### Step 1: Create the Prediction API üìà&#xA;&#xA;1. Navigate to **API Builder** in the left sidebar&#xA;2. Click **+ Create API** and select **HTTP API**&#xA;3. Name your API &#34;InventoryPrediction&#34;&#xA;4. Add a parameter called &#34;productId&#34; of type &#34;string&#34;&#xA;5. Add a parameter called &#34;predictionDays&#34; of type &#34;number&#34; with a default value of 30&#xA;6. Add a step and select **Data Source Query**&#xA;7. Configure the step:&#xA;   - Select your database resource&#xA;   - Enter the following SQL query to get historical sales data:&#xA;&#xA;```sql&#xA;SELECT&#xA;  date,&#xA;  SUM(quantity) as daily_sales&#xA;FROM sales&#xA;WHERE product_id = {{params.productId}}&#xA;GROUP BY date&#xA;ORDER BY date DESC&#xA;LIMIT 90;&#xA;```&#xA;&#xA;8. Name this step &#34;GetHistoricalSales&#34;&#xA;9. Add another step and select **Data Source Query**&#xA;10. Configure the step:&#xA;    - Select your database resource&#xA;    - Enter the following SQL query to get product information:&#xA;&#xA;```sql&#xA;SELECT&#xA;  name,&#xA;  category,&#xA;  current_stock,&#xA;  reorder_point,&#xA;  lead_time_days&#xA;FROM inventory&#xA;JOIN products ON inventory.product_id = products.id&#xA;WHERE product_id = {{params.productId}};&#xA;```&#xA;&#xA;11. Name this step &#34;GetProductInfo&#34;&#xA;12. Add a step using **AWS Bedrock**&#xA;13. Configure the step:&#xA;    - Select your Bedrock resource&#xA;    - Choose &#34;Text&#34; as the input type&#xA;    - For the prompt, we&#39;ll ask Bedrock to predict future inventory needs:&#xA;&#xA;```&#xA;You are an inventory forecasting expert. Based on the following historical sales data and product information, predict the daily sales for the next {{params.predictionDays}} days and determine if and when a reorder should be placed.&#xA;&#xA;Historical Sales Data (last 90 days):&#xA;{{steps.GetHistoricalSales.body}}&#xA;&#xA;Product Information:&#xA;{{steps.GetProductInfo.body}}&#xA;&#xA;Provide your analysis in the following JSON format:&#xA;{&#xA;  &#34;product_name&#34;: &#34;Product Name&#34;,&#xA;  &#34;daily_sales_prediction&#34;: [&#xA;    {&#34;day&#34;: 1, &#34;predicted_sales&#34;: X},&#xA;    {&#34;day&#34;: 2, &#34;predicted_sales&#34;: X},&#xA;    ...&#xA;  ],&#xA;  &#34;total_predicted_sales&#34;: X,&#xA;  &#34;days_until_stockout&#34;: X,&#xA;  &#34;reorder_recommendation&#34;: {&#xA;    &#34;should_reorder&#34;: true/false,&#xA;    &#34;recommended_order_quantity&#34;: X,&#xA;    &#34;recommended_order_date&#34;: &#34;YYYY-MM-DD&#34;&#xA;  },&#xA;  &#34;confidence_level&#34;: &#34;high/medium/low&#34;,&#xA;  &#34;reasoning&#34;: &#34;Brief explanation of the prediction logic&#34;&#xA;}&#xA;```&#xA;&#xA;14. Name this step &#34;GeneratePrediction&#34;&#xA;15. Add a final step using **JavaScript**&#xA;16. Configure the step:&#xA;    - Enter the following code to parse the JSON response:&#xA;&#xA;```javascript&#xA;// Parse the prediction response&#xA;const predictionText = steps.GeneratePrediction.body;&#xA;let prediction;&#xA;&#xA;try {&#xA;  // Extract JSON from the response (in case the model included extra text)&#xA;  const jsonMatch = predictionText.match(/\{[\s\S]*\}/);&#xA;  if (jsonMatch) {&#xA;    prediction = JSON.parse(jsonMatch[0]);&#xA;  } else {&#xA;    throw new Error(&#34;No JSON found in response&#34;);&#xA;  }&#xA;} catch (error) {&#xA;  return {&#xA;    error: &#34;Failed to parse prediction&#34;,&#xA;    details: error.message,&#xA;    rawResponse: predictionText&#xA;  };&#xA;}&#xA;&#xA;// Calculate additional metrics&#xA;const currentStock = steps.GetProductInfo.body[0].current_stock;&#xA;const dailyPredictions = prediction.daily_sales_prediction;&#xA;&#xA;// Generate data for chart&#xA;const chartData = dailyPredictions.map(day =&gt; ({&#xA;  day: day.day,&#xA;  predicted_sales: day.predicted_sales,&#xA;  remaining_stock: Math.max(0, currentStock - dailyPredictions&#xA;    .filter(d =&gt; d.day &lt;= day.day)&#xA;    .reduce((sum, d) =&gt; sum + d.predicted_sales, 0))&#xA;}));&#xA;&#xA;return {&#xA;  prediction,&#xA;  chartData,&#xA;  productInfo: steps.GetProductInfo.body[0]&#xA;};&#xA;```&#xA;&#xA;17. Name this step &#34;FormatResults&#34;&#xA;18. Click **Save** to save your API&#xA;&#xA;::alert[Foundation models like Claude can generate structured data like JSON, but they sometimes include additional text. The JavaScript step ensures we extract and parse only the JSON portion of the response.]{header=&#34;Info&#34;}&#xA;&#xA;### Step 2: Create the Prediction UI üñ•Ô∏è&#xA;&#xA;Now, let&#39;s create a user interface for the prediction feature:&#xA;&#xA;1. Navigate to **UI Builder** in the left sidebar&#xA;2. Open your dashboard page or create a new page&#xA;3. Add a new container with a heading &#34;Inventory Prediction&#34;&#xA;4. Add a dropdown component to select a product&#xA;   - Populate it with a list of products from your database&#xA;5. Add a number input for &#34;Prediction Days&#34; with default value 30&#xA;6. Add a button labeled &#34;Generate Prediction&#34;&#xA;7. Configure the button&#39;s onClick event:&#xA;   - Select &#34;Run API&#34;&#xA;   - Choose your &#34;InventoryPrediction&#34; API&#xA;   - Set the parameters from the dropdown and input&#xA;   - For the success action, select &#34;Update State&#34;&#xA;   - Set the state key to &#34;predictionResults&#34;&#xA;8. Add a container to display the prediction results&#xA;9. Add a text component to show the summary:&#xA;   - Set the content to display key prediction metrics&#xA;   - Use conditional formatting to highlight critical information&#xA;10. Add a line chart component:&#xA;    - Set the data source to `{{state.predictionResults.steps.FormatResults.body.chartData}}`&#xA;    - Configure series for &#34;predicted_sales&#34; and &#34;remaining_stock&#34;&#xA;    - Add a reference line for the reorder point&#xA;11. Add a card component to show the reorder recommendation:&#xA;    - Display the recommended order quantity and date&#xA;    - Add a visual indicator of urgency based on days until stockout&#xA;12. Add appropriate loading states and error handling&#xA;&#xA;::alert[Use color coding to make the prediction results more intuitive. For example, use red for products that need immediate reordering, yellow for those approaching reorder point, and green for those with sufficient stock.]{header=&#34;Tip&#34; type=&#34;info&#34;}&#xA;&#xA;### Step 3: Test Your Prediction Feature ‚úÖ&#xA;&#xA;1. Preview your application&#xA;2. Select a product from the dropdown&#xA;3. Click &#34;Generate Prediction&#34;&#xA;4. Review the prediction results, including:&#xA;   - Daily sales forecast&#xA;   - Projected stockout date&#xA;   - Reorder recommendations&#xA;   - Visualization of inventory levels over time&#xA;&#xA;::alert[This predictive analytics feature demonstrates how AWS Bedrock can be used to create sophisticated forecasting tools that help businesses make data-driven inventory decisions.]{header=&#34;Success&#34; type=&#34;success&#34;}&#xA;&#xA;![Inventory Prediction Feature](/images/inventory-prediction-feature.png) --&gt;</description>
    </item>
    <item>
      <title>Bedrock Module Summary</title>
      <link>//localhost:62373/5_modulefive_bedrock/07_bedrocksummary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:62373/5_modulefive_bedrock/07_bedrocksummary.html</guid>
      <description>&lt;h2 id=&#34;aws-bedrock-integration-summary&#34;&gt;AWS Bedrock Integration Summary&lt;/h2&gt;&#xA;&lt;p&gt;Congratulations! You&amp;rsquo;ve successfully integrated AWS Bedrock with your Superblocks application to create powerful AI-enhanced features:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Inventory Analysis&lt;/strong&gt; üì¶: Automated insights about inventory status and reordering needs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Natural Language Queries&lt;/strong&gt; üí¨: A user-friendly interface for exploring sales data&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Predictive Analytics&lt;/strong&gt; üîÆ: Forward-looking inventory forecasts to prevent stockouts&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Conversational Assistant&lt;/strong&gt; ü§ñ: A business assistant that helps users interact with data&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;key-takeaways&#34;&gt;Key Takeaways&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Simplified AI Integration&lt;/strong&gt;: Superblocks makes it easy to connect to AWS Bedrock without deep ML expertise&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Business Value&lt;/strong&gt;: These AI features provide actionable insights that drive better business decisions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Development Efficiency&lt;/strong&gt;: What would typically take weeks or months to build was accomplished in hours&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Customizability&lt;/strong&gt;: The patterns you&amp;rsquo;ve learned can be applied to many different business scenarios&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;::alert[The combination of AWS Bedrock and Superblocks enables you to build sophisticated AI features with minimal code, making advanced AI capabilities accessible to developers of all skill levels.]{header=&amp;ldquo;Important&amp;rdquo; type=&amp;ldquo;info&amp;rdquo;}&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
