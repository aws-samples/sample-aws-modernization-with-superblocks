<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Building a Full-Stack AI Application with AWS and Superblocks on English</title>
    <link>//localhost:1313/</link>
    <description>Recent content in Building a Full-Stack AI Application with AWS and Superblocks on English</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Dropdown APIs</title>
      <link>//localhost:1313/4_modulefour_backend/01_dropdownapis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/4_modulefour_backend/01_dropdownapis.html</guid>
      <description>&lt;h1 id=&#34;build-dropdown-apis&#34;&gt;Build Dropdown APIs&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create two APIs to populate your filter dropdowns with paper categories and locations.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-create-the-categories-api&#34;&gt;Step 1: Create the Categories API&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Open API Builder:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Press CMD/CTRL + U&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Create the API:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add new API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select your database integration&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add the query:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DISTINCT&lt;/span&gt; category_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.inventory;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Test and save:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Run API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click the pencil icon next to &amp;lsquo;API1&amp;rsquo; and rename it to &amp;ldquo;get_papercategories&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-create-the-locations-api&#34;&gt;Step 2: Create the Locations API&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create the API:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add new API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select the same database integration&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add the query:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DISTINCT&lt;/span&gt; location_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.inventory;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Test and save:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Run API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click the pencil icon next to &amp;lsquo;API1&amp;rsquo; and rename it to &amp;ldquo;get_locations&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-3-connect-your-dropdowns&#34;&gt;Step 3: Connect Your Dropdowns&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Close API Builder (CMD/CTRL + U)&lt;/li&gt;&#xA;&lt;li&gt;Configure Categories dropdown:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select the Paper Categories dropdown&lt;/li&gt;&#xA;&lt;li&gt;In Properties panel:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Find &amp;ldquo;Options&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Clear placeholder data&lt;/li&gt;&#xA;&lt;li&gt;Add: {{get_papercategories.response}}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Configure Locations dropdown:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select the Location dropdown&lt;/li&gt;&#xA;&lt;li&gt;In Properties panel:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Find &amp;ldquo;Options&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Clear placeholder data&lt;/li&gt;&#xA;&lt;li&gt;Add: {{get_locations.response}}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;Test both dropdowns after connecting the APIs. They should show real categories and locations. If no data appears, try clicking &amp;ldquo;Run API&amp;rdquo; again and verify your SQL queries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building the Header Navigation</title>
      <link>//localhost:1313/3_modulethree_frontend/01_headernavigation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/3_modulethree_frontend/01_headernavigation.html</guid>
      <description>&lt;h1 id=&#34;building-the-header-navigation&#34;&gt;Building the Header Navigation&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create a navigation header for your dashboard.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-add-the-navigation-bar&#34;&gt;Step 1: Add the Navigation Bar&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Browse templates&amp;rdquo; in the top section&lt;/li&gt;&#xA;&lt;li&gt;Search for &amp;ldquo;Navigation bar with left aligned nav items&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Insert&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-add-your-logo-optional&#34;&gt;Step 2: Add Your Logo (Optional)&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Remove the default logo:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click the &amp;ldquo;Acme inc.&amp;rdquo; icon&lt;/li&gt;&#xA;&lt;li&gt;Click delete&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add your logo:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add Component&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Search for &amp;ldquo;Image&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select the image component&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Configure the image:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set the image URL&lt;/li&gt;&#xA;&lt;li&gt;Adjust the size as needed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how your header should look after completion:&#xA;&lt;br&gt;&#xA;&lt;img src=&#34;//localhost:1313/images/gifs/header-add-navbar.gif&#34; width=&#34;700&#34; height=&#34;350&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploying Your Application</title>
      <link>//localhost:1313/7_moduleseven_deployment/01_deployingapp.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/7_moduleseven_deployment/01_deployingapp.html</guid>
      <description>&lt;h1 id=&#34;deploying-your-application&#34;&gt;Deploying Your Application&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s deploy your dashboard to production using Superblocks&amp;rsquo; simple deployment process.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-deployment&#34;&gt;Understanding Deployment&lt;/h2&gt;&#xA;&lt;p&gt;When you deploy with Superblocks:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Your code runs on our Global Edge Network&lt;/li&gt;&#xA;&lt;li&gt;Changes apply instantly worldwide&lt;/li&gt;&#xA;&lt;li&gt;Users get fast access from anywhere&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;When using Source Control, only commits on the default branch can be deployed. Make sure to merge your changes to make them deployable.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;deploying-your-dashboard&#34;&gt;Deploying Your Dashboard&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Open Version Control:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click Version Control icon in the sidebar&lt;/li&gt;&#xA;&lt;li&gt;Find your latest commit in the list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Deploy your changes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up AWS Bedrock</title>
      <link>//localhost:1313/5_modulefive_bedrock/01_setupbedrock.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/5_modulefive_bedrock/01_setupbedrock.html</guid>
      <description>&lt;h2 id=&#34;configuring-aws-bedrock-in-superblocks-&#34;&gt;Configuring AWS Bedrock in Superblocks 🔌&lt;/h2&gt;&#xA;&lt;p&gt;Superblocks makes it remarkably simple to integrate with AWS Bedrock. In this section, we&amp;rsquo;ll configure the connection between your Superblocks application and AWS Bedrock.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-configure-aws&#34;&gt;Step 1: Configure AWS&lt;/h3&gt;&#xA;&lt;!-- First, we need to set up the AWS credentials that will allow Superblocks to access Bedrock:&#xA;&#xA;1. In your Superblocks workspace, navigate to **Settings &gt; Integrations**&#xA;2. Click on **+ Add Integration** and select **AWS**&#xA;3. Enter a name for your integration (e.g., &#34;AWS-Bedrock&#34;)&#xA;4. Enter your AWS credentials:&#xA;   - AWS Access Key ID&#xA;   - AWS Secret Access Key&#xA;   - AWS Region (choose a region where Bedrock is available, such as `us-east-1`)&#xA;5. Click **Test Connection** to verify your credentials work&#xA;6. Click **Save** to store your integration&#xA;&#xA;:::alert{header=&#34;Tip&#34; type=&#34;info&#34;}&#xA;For production environments, we recommend using IAM roles with appropriate permissions rather than access keys. For this workshop, we&#39;re using access keys for simplicity.&#xA;:::&#xA;&#xA;### Step 2: Create a Bedrock Resource 🧩&#xA;&#xA;Now, let&#39;s create a Bedrock resource in Superblocks:&#xA;&#xA;1. Navigate to **Resources** in the left sidebar&#xA;2. Click **+ Create Resource** and select **AWS Bedrock**&#xA;3. Enter a name for your resource (e.g., &#34;InventoryAnalysis&#34;)&#xA;4. Select the AWS integration you created in the previous step&#xA;5. Choose the foundation model you want to use:&#xA;   - For text analysis: **Claude 3 Sonnet**&#xA;   - For image generation: **Stable Diffusion XL**&#xA;6. Click **Create Resource**&#xA;&#xA;::alert[Different foundation models excel at different tasks. Claude models are excellent for text analysis and reasoning, while Stable Diffusion excels at image generation. Choose the appropriate model for your specific use case.]{header=&#34;Note&#34;}&#xA;&#xA;### Step 3: Test Your Bedrock Connection ✅&#xA;&#xA;Let&#39;s verify that your Bedrock connection is working:&#xA;&#xA;1. Navigate to **API Builder** in the left sidebar&#xA;2. Click **+ Create API** and select **HTTP API**&#xA;3. Name your API &#34;BedrockTest&#34;&#xA;4. Add a new step and select **AWS Bedrock**&#xA;5. Configure the step:&#xA;   - Select your Bedrock resource&#xA;   - Choose &#34;Text&#34; as the input type&#xA;   - Enter the following prompt: &#34;Summarize the benefits of AI for inventory management in 3 bullet points&#34;&#xA;6. Click **Test** to run the API&#xA;7. You should see a response from the model with 3 bullet points about inventory management&#xA;&#xA;::alert[Congratulations! You&#39;ve successfully connected Superblocks to AWS Bedrock. In the next section, we&#39;ll build a more sophisticated feature using this integration.]{header=&#34;Success&#34; type=&#34;success&#34;}&#xA;&#xA;![Bedrock Test Response](/images/bedrock-test-response.png) --&gt;</description>
    </item>
    <item>
      <title>Superblocks&#39; Mission</title>
      <link>//localhost:1313/1_moduleone_overview/01_superblocksmission.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/1_moduleone_overview/01_superblocksmission.html</guid>
      <description>&lt;h1 id=&#34;superblocks-mission&#34;&gt;Superblocks&amp;rsquo; Mission&lt;/h1&gt;&#xA;&lt;h2 id=&#34;empowering-the-next-billion-developers&#34;&gt;Empowering the next billion developers!&lt;/h2&gt;&#xA;&lt;p&gt;Enterprises today face mounting challenges with DIY software development approaches. Building and maintaining custom internal tools creates technical debt, while fragmented development processes and governance challenges slow innovation. Teams get caught in endless cycles of maintenance, struggling to keep up with security requirements and feature requests. Traditional approaches not only create barriers between technical and business teams but also drain resources that could be spent on core business innovation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>User Identification</title>
      <link>//localhost:1313/6_modulesix_governance/01_useridentification.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/6_modulesix_governance/01_useridentification.html</guid>
      <description>&lt;h1 id=&#34;user-identification&#34;&gt;User Identification&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s display user information in your dashboard to help users identify who&amp;rsquo;s logged in.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-set-up-user-display&#34;&gt;Step 1: Set Up User Display&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Find the user icon:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Look in the top-right corner&lt;/li&gt;&#xA;&lt;li&gt;Click to select the icon component&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Add the user&amp;rsquo;s name:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Open the Properties panel&lt;/li&gt;&#xA;&lt;li&gt;Find the &amp;ldquo;Label&amp;rdquo; field&lt;/li&gt;&#xA;&lt;li&gt;Add this JavaScript:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&lt;span style=&#34;color:#a6e22e&#34;&gt;Global&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;working-with-user-context&#34;&gt;Working with User Context&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;Global.user&lt;/code&gt; object gives you access to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Full name&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Email address&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;groups&lt;/code&gt;: Access groups&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt;: Additional info&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Example uses:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Workshop Overview</title>
      <link>//localhost:1313/2_moduletwo_preqandsetup/01_workshopoverview.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/2_moduletwo_preqandsetup/01_workshopoverview.html</guid>
      <description>&lt;h1 id=&#34;workshop-overview&#34;&gt;Workshop Overview&lt;/h1&gt;&#xA;&lt;p&gt;Welcome to the Superblocks workshop! Together, we&amp;rsquo;ll build a full-stack AI application for Acme Incorporated. You&amp;rsquo;ll create a modern, interactive dashboard featuring:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dynamic data filtering&lt;/li&gt;&#xA;&lt;li&gt;Real-time statistics and insights&lt;/li&gt;&#xA;&lt;li&gt;Interactive data visualization&lt;/li&gt;&#xA;&lt;li&gt;Role-based access control&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;technical-requirements&#34;&gt;Technical Requirements&lt;/h2&gt;&#xA;&lt;p&gt;To get started, you&amp;rsquo;ll need:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. Web Browser&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chrome (recommended)&lt;/li&gt;&#xA;&lt;li&gt;Firefox&lt;/li&gt;&#xA;&lt;li&gt;Safari&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. Superblocks Account&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Permission to create apps (role can be owner, admin, or developer)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;3. Database with proper credentials&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating the Filter Section</title>
      <link>//localhost:1313/3_modulethree_frontend/02_filtersection.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/3_modulethree_frontend/02_filtersection.html</guid>
      <description>&lt;h1 id=&#34;creating-the-filter-section&#34;&gt;Creating the Filter Section&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s add filters to help users interact with the dashboard data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-create-the-filter-container&#34;&gt;Step 1: Create the Filter Container&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add a new section:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;lsquo;+ Add Section&amp;rsquo; below the navigation bar&lt;/li&gt;&#xA;&lt;li&gt;A new section with a column component will appear&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Configure the layout:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set layout to &amp;ldquo;Horizontal&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set &amp;ldquo;Vertical align&amp;rdquo; to &amp;ldquo;Bottom&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-add-filter-components&#34;&gt;Step 2: Add Filter Components&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add dropdowns:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add Component&amp;rdquo; in the column&lt;/li&gt;&#xA;&lt;li&gt;Add two dropdown components:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First dropdown: Label = &amp;ldquo;Paper Categories&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Second dropdown: Label = &amp;ldquo;Location&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set both widths to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add buttons:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add two button components:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First button: Label = &amp;ldquo;Submit&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Second button: Label = &amp;ldquo;Reset Filters&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;The horizontal layout ensures all filter components are aligned properly in a single row and removes the need to use CSS or Flexbox to align components.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating the Inventory Data API</title>
      <link>//localhost:1313/4_modulefour_backend/02_inventoryapi.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/4_modulefour_backend/02_inventoryapi.html</guid>
      <description>&lt;h1 id=&#34;creating-the-inventory-data-api&#34;&gt;Creating the Inventory Data API&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create a dynamic API that filters inventory data based on your dropdown selections.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-create-the-inventory-api&#34;&gt;Step 1: Create the Inventory API&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Open API Builder:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Press CMD/CTRL + U&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Create the API:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add new API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select your database integration&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add the query:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.inventory&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;Dropdown1&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.selectedOptionValue &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       category_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;Dropdown1&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.selectedOptionValue &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;Dropdown2&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.selectedOptionValue &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       location_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;Dropdown2&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.selectedOptionValue &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Test and save:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Run API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click the pencil icon next to &amp;ldquo;API1&amp;rdquo; and rename it to &amp;ldquo;get_inventory_data&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;Make sure your dropdown component names match &lt;code&gt;Dropdown1&lt;/code&gt; and &lt;code&gt;Dropdown2&lt;/code&gt;. If you used different names, update them in the SQL query.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>//localhost:1313/getting-started.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/getting-started.html</guid>
      <description>&lt;h2 id=&#34;workshop-architecture&#34;&gt;Workshop architecture&lt;/h2&gt;&#xA;&lt;p&gt;The following architecture diagram illustrates the various components of the workshop.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//localhost:1313/static/images/introduction/architecture.png&#34; alt=&#34;architecture diagram&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;preparing-for-the-workshop&#34;&gt;Preparing for the workshop&lt;/h2&gt;&#xA;&lt;p&gt;Follow the installation instructions in this section to prepare your environment for the workshop.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you are attending an AWS guided event, setup your environment &lt;a href=&#34;//localhost:1313/02-getting-started/01-aws-event&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;If you are &lt;em&gt;not&lt;/em&gt; participating in an AWS guided event, setup your environment &lt;a href=&#34;//localhost:1313/02-getting-started/02-own-account&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;::alert[If you are running this workshop on your own AWS account, remember to delete all resources by following the &lt;a href=&#34;//localhost:1313/90-cleanup&#34;&gt;Clean Up Resources&lt;/a&gt; section to avoid unnecessary charges.]{header=Note}&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implementing Access Control</title>
      <link>//localhost:1313/6_modulesix_governance/02_accesscontrol.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/6_modulesix_governance/02_accesscontrol.html</guid>
      <description>&lt;h1 id=&#34;implementing-access-control&#34;&gt;Implementing Access Control&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s secure your dashboard by controlling who can access sensitive features.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-add-access-rules&#34;&gt;Step 1: Add Access Rules&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Find the Invoices tab:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Locate &amp;ldquo;Invoices&amp;rdquo; in the navigation&lt;/li&gt;&#xA;&lt;li&gt;Select to view its properties&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create visibility rule:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Find &amp;ldquo;Visibility&amp;rdquo; under Layout&lt;/li&gt;&#xA;&lt;li&gt;Add this access check:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Smith&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sarah Johnson&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Michael Lee&amp;#39;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Global&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;how-access-control-works&#34;&gt;How Access Control Works&lt;/h2&gt;&#xA;&lt;p&gt;This rule:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only shows Invoices to listed users&lt;/li&gt;&#xA;&lt;li&gt;Hides it from everyone else&lt;/li&gt;&#xA;&lt;li&gt;Keeps the UI clean and secure&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;more-access-examples&#34;&gt;More Access Examples&lt;/h2&gt;&#xA;&lt;p&gt;Control access by group membership:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inventory Analysis with Bedrock</title>
      <link>//localhost:1313/5_modulefive_bedrock/02_inventoryanalysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/5_modulefive_bedrock/02_inventoryanalysis.html</guid>
      <description>&lt;h2 id=&#34;building-an-inventory-analysis-feature-&#34;&gt;Building an Inventory Analysis Feature 📦&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have our Bedrock connection set up, let&amp;rsquo;s create a powerful inventory analysis feature that can provide insights about current inventory levels, identify potential stockouts, and recommend transfering strategies.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-create-the-inventory-analysis-api&#34;&gt;Step 1: Create the Inventory Analysis API&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;API Builder&lt;/strong&gt; in the left sidebar&lt;/li&gt;&#xA;&lt;li&gt;Open the API Builder Tool (CMD/CTRL + U)&lt;/li&gt;&#xA;&lt;li&gt;Search for the integration to your database (AWS RDS if applicable)&lt;/li&gt;&#xA;&lt;li&gt;Name your API &amp;ldquo;generate_insights&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Add the below SQL and rename the step to &amp;ldquo;get_input_data&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.inventory_id, ils.sku, ils.product_name, ils.category_name,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.location_name, ils.current_stock, ils.reorder_point,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ils.stock_margin, ils.stock_status,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sv.daily_velocity, po.total_quantity_ordered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.inventory_location_status ils&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; dm_operations.sales_velocity sv &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; ils.inventory_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sv.inventory_id &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; ils.location_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sv.location_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; dm_operations.pending_orders po &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; ils.inventory_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po.inventory_id &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; ils.location_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; po.location_name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;Underneath the first step, add a new Python step&lt;/li&gt;&#xA;&lt;li&gt;Add the below Python code to limit the input data size and rename the step to &amp;ldquo;simplify_input_data&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_data_for_llm&lt;/span&gt;(input_data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert JSON object to a formatted string representation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(input_data, (dict, list)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a nicely formatted string with indentation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        formatted_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(input_data, indent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Truncate if too large&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(formatted_string) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; max_chars:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            formatted_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; formatted_string[:max_chars] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...(truncated)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; formatted_string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prepare_data_for_llm(get_input_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;&#xA;&lt;li&gt;Add an additional Python step and the below code to call AWS Bedrock&lt;/li&gt;&#xA;&lt;li&gt;Rename the step to &amp;ldquo;send_to_bedrock&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_to_bedrock&lt;/span&gt;(text_data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Truncate data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text_data[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Create client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        service_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bedrock-runtime&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        region_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_region,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aws_access_key_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_access_key,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aws_secret_access_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws_secret_key,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Create prompt as a message&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prompt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Analyze this inventory data: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;text_data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Give me 3 inventory transfer recommendations across 3 different locations with:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Product name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - From location&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - To location&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Quantity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Priority score (0-100)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Cost savings&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Reasoning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - Analysis points (demand, cost, impact)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      Make sure to the reasoning is informative and not a generic statement. The reasoning should be different for each recommendation. Do not restate the analysis points in the response and can include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      information on forecased demand in rationale. Return as a JSON array.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Make request with content as an array&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invoke_model(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modelId&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amazon.nova-lite-v1:0&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;messages&amp;#34;&lt;/span&gt;: [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: prompt}]}]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        contentType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        accept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Parse the response&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Check response structure and extract accordingly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response_body &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isinstance(response_body[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;], list):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_body[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Fallback if response format is different&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(response_body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt;: output}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; send_to_bedrock(simplify_input_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;Add a 4th and final Python step with the below code, and rename it to &amp;ldquo;format_output&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_text_recommendations&lt;/span&gt;(raw_output):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Get the raw output string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(raw_output, dict) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_output:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_output[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw_output&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(raw_output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Extract the JSON array from the code block using regex&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        json_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;```json\s*\n(.*?)\n\s*```&amp;#34;&lt;/span&gt;, text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; json_match:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json_match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Parse the extracted JSON directly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# If we can&amp;#39;t find a code block, try to parse the nested structure&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# First convert single quotes to double quotes for proper JSON parsing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# But be careful with nested quotes in the JSON content&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#39;&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# This is a Python dict representation, not valid JSON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Use ast.literal_eval which is safer than eval&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ast&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;literal_eval(text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Navigate through the nested structure&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; message &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isinstance(message[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;], list):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    content_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# Extract JSON from code block&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    json_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;```json\s*\n(.*?)\n\s*```&amp;#34;&lt;/span&gt;, content_text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; json_match:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json_match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# If all else fails, run the original regex pattern&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d+)\.\s+Product name:\s+(.*?)\nFrom location:\s+(.*?)\nTo location:\s+(.*?)\nQuantity:\s+(.*?)\nPriority score.*?:\s+(.*?)\nCost savings:\s+(.*?)\nReasoning:\s+(.*?)(?=\n\n\d+\.|\n\nPlease|\Z)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        matches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(pattern, text, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matches:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; matches:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from_location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to_location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cost_savings&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reasoning&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# Try to convert numeric fields&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quantity&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        recommendation[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority_score&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(recommendation)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not parse recommendations from output&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_output&amp;#34;&lt;/span&gt;: text,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Custom extraction as a last resort&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Direct extraction of the JSON array from the text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            start_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n  {&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            end_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n```&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; start_idx &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; end_idx &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text[start_idx : end_idx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# Replace escaped characters&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                json_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    json_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                recommendations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; recommendations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: str(e), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_output&amp;#34;&lt;/span&gt;: raw_output}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call the function with the Bedrock output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;raw_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_to_bedrock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;output&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parse_text_recommendations(raw_output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;Click &lt;strong&gt;Run API&lt;/strong&gt; to test your API&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;When crafting prompts for foundation models, be specific about the format and type of analysis you want. This helps ensure consistent, useful responses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resource Setup</title>
      <link>//localhost:1313/2_moduletwo_preqandsetup/02_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/2_moduletwo_preqandsetup/02_setup.html</guid>
      <description>&lt;h1 id=&#34;resource-setup&#34;&gt;Resource Setup&lt;/h1&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;To complete this workshop, you&amp;rsquo;ll need:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A Superblocks Account&lt;/li&gt;&#xA;&lt;li&gt;Database Access&lt;/li&gt;&#xA;&lt;li&gt;A Modern Web Browser (Chrome recommended)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-1-superblocks-account-setup&#34;&gt;Step 1: Superblocks Account Setup&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Create a Superblocks Account&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &lt;a href=&#34;https://www.superblocks.com&#34; target=&#34;_blank&#34;&gt;superblocks.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Login&amp;rdquo; then &amp;ldquo;Sign up&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Use your work email (note: public domains like gmail.com are not allowed)&lt;/li&gt;&#xA;&lt;li&gt;Verify your email address&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Already have an account?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &lt;a href=&#34;https://www.superblocks.com&#34; target=&#34;_blank&#34;&gt;superblocks.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Login&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Enter your credentials&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;step-2-database-configuration&#34;&gt;Step 2: Database Configuration&lt;/h2&gt;&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;If you&amp;rsquo;re attending a guided workshop, you&amp;rsquo;ll be provided with database credentials and can skip the RDS setup section below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical Problem</title>
      <link>//localhost:1313/1_moduleone_overview/02_technicalissueproblem.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/1_moduleone_overview/02_technicalissueproblem.html</guid>
      <description>&lt;h1 id=&#34;the-technical-challenge&#34;&gt;The Technical Challenge&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-hidden-cost-of-diy-development&#34;&gt;The Hidden Cost of DIY Development&lt;/h2&gt;&#xA;&lt;p&gt;When enterprises build their own internal tools and platforms, they quickly discover that the true cost goes far beyond initial development. What starts as &amp;ldquo;just a few internal tools&amp;rdquo; soon becomes a massive drain on resources, innovation, and team morale.&lt;/p&gt;&#xA;&lt;h4 id=&#34;the-infrastructure-trap&#34;&gt;The Infrastructure Trap&lt;/h4&gt;&#xA;&lt;p&gt;Every new tool adds complexity to your system. Security patches, scaling issues, and integration problems multiply. Your team gets caught in an endless cycle of maintenance, while technical debt accumulates with each new feature. Soon, the infrastructure that was meant to help your business becomes a burden that holds it back.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building the Hero Stats Section</title>
      <link>//localhost:1313/3_modulethree_frontend/03_herostats.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/3_modulethree_frontend/03_herostats.html</guid>
      <description>&lt;h1 id=&#34;building-the-hero-stats-section&#34;&gt;Building the Hero Stats Section&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s add key metrics to your dashboard using hero stats.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-add-the-stats-section&#34;&gt;Step 1: Add the Stats Section&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create a new section:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;+ Add Section&amp;rdquo; below the filters&lt;/li&gt;&#xA;&lt;li&gt;A column component will be added automatically&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add the template:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click the template icon next to &amp;ldquo;Add Component&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Search for &amp;ldquo;Hero stats with label below&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Insert&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-configure-your-stats&#34;&gt;Step 2: Configure Your Stats&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add a fourth stat:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Copy the third stat tile (CMD/CTRL + C)&lt;/li&gt;&#xA;&lt;li&gt;Paste to create a new tile (CMD/CTRL + V)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Update the stats:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Total Inventory (use &amp;ldquo;$&amp;rdquo;)&lt;/li&gt;&#xA;&lt;li&gt;Low Stock Items (use &amp;ldquo;items&amp;rdquo;)&lt;/li&gt;&#xA;&lt;li&gt;Pending Orders (use &amp;ldquo;orders&amp;rdquo;)&lt;/li&gt;&#xA;&lt;li&gt;YTD Sales (use &amp;ldquo;$&amp;rdquo;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Simplify the display:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the percentage changes&lt;/li&gt;&#xA;&lt;li&gt;Remove the parent container&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how your hero stats section should look after completion:&#xA;&lt;img src=&#34;//localhost:1313/images/gifs/herostats-add-components.gif&#34; alt=&#34;Hero Stats Example&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implementing the Hero Stats APIs</title>
      <link>//localhost:1313/4_modulefour_backend/03_herostatsapis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/4_modulefour_backend/03_herostatsapis.html</guid>
      <description>&lt;h1 id=&#34;implementing-the-hero-stats-apis&#34;&gt;Implementing the Hero Stats APIs&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create APIs for your hero stats using parallel execution to fetch multiple metrics simultaneously.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-set-up-the-api&#34;&gt;Step 1: Set Up the API&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Open API Builder:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Press CMD/CTRL + U&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Create parallel API:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add new API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Hover over &amp;ldquo;Control Blocks&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select &amp;ldquo;Run Parallel&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Click the pen icon next to &amp;lsquo;API1&amp;rsquo; and rename it to &amp;ldquo;get_herostats&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-configure-parallel-paths&#34;&gt;Step 2: Configure Parallel Paths&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add paths:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click the Parallel block&lt;/li&gt;&#xA;&lt;li&gt;Click + to add three new paths&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Name your paths:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Path1: &amp;ldquo;get_inventory&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Path2: &amp;ldquo;get_lowstock&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Path3: &amp;ldquo;get_pendingorders&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Path4: &amp;ldquo;get_ytdsales&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-3-add-your-queries&#34;&gt;Step 3: Add Your Queries&lt;/h2&gt;&#xA;&lt;p&gt;Add these SQL queries to each path:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical Concepts</title>
      <link>//localhost:1313/2_moduletwo_preqandsetup/03_technicalconcepts.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/2_moduletwo_preqandsetup/03_technicalconcepts.html</guid>
      <description>&lt;h1 id=&#34;technical-concepts&#34;&gt;Technical Concepts&lt;/h1&gt;&#xA;&lt;h2 id=&#34;superblocks-architecture&#34;&gt;Superblocks Architecture&lt;/h2&gt;&#xA;&lt;p&gt;Superblocks uses a modern three-plane architecture:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Control Plane&lt;/strong&gt; (Superblocks Cloud)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Handles user authentication and permissions&lt;/li&gt;&#xA;&lt;li&gt;Manages application definitions and configurations&lt;/li&gt;&#xA;&lt;li&gt;Provides centralized logging and monitoring&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Compute Plane&lt;/strong&gt; (Execution Layer)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Executes API calls and functions&lt;/li&gt;&#xA;&lt;li&gt;Processes data transformations&lt;/li&gt;&#xA;&lt;li&gt;Handles request routing and retries&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Data Plane&lt;/strong&gt; (Your Data Sources)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Your databases (SQL, NoSQL)&lt;/li&gt;&#xA;&lt;li&gt;Internal services and APIs&lt;/li&gt;&#xA;&lt;li&gt;Data warehouses and storage&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;deployment-options&#34;&gt;Deployment Options&lt;/h2&gt;&#xA;&lt;p&gt;You can deploy Superblocks in two ways, choosing where to run the compute plane based on your security needs:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing Access Controls</title>
      <link>//localhost:1313/6_modulesix_governance/03_testing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/6_modulesix_governance/03_testing.html</guid>
      <description>&lt;h1 id=&#34;testing-access-controls&#34;&gt;Testing Access Controls&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s verify your access controls work correctly by testing with different user scenarios.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-test-in-preview&#34;&gt;Step 1: Test in Preview&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Open Preview mode:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Preview&amp;rdquo; in the top-right&lt;/li&gt;&#xA;&lt;li&gt;This shows a preview of the dashboard and allows you to see how it would look for different users&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Try different use cases:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add your name to the rule to grant access to the Invoices tab&lt;/li&gt;&#xA;&lt;li&gt;Check what you can see in the preview&lt;/li&gt;&#xA;&lt;li&gt;Verify restrictions work&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;test-access-rules&#34;&gt;Test Access Rules&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Test restricted access:&lt;/p&gt;</description>
    </item>
    <item>
      <title>UI Component for Analysis</title>
      <link>//localhost:1313/5_modulefive_bedrock/03_uiforanalysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/5_modulefive_bedrock/03_uiforanalysis.html</guid>
      <description>&lt;h2 id=&#34;create-a-ui-component-for-the-analysis-&#34;&gt;Create a UI Component for the Analysis 🖥️&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have our Bedrock connection set up, let&amp;rsquo;s create a powerful inventory analysis feature that can provide insights about current inventory levels, identify potential stockouts, and recommend transfering strategies.&lt;/p&gt;&#xA;&lt;h3 id=&#34;step-1-create-a-ui-component-for-the-analysis-&#34;&gt;Step 1: Create a UI Component for the Analysis 🖥️&lt;/h3&gt;&#xA;&lt;p&gt;Now, let&amp;rsquo;s create a UI component to display the inventory analysis:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Navigate to &lt;strong&gt;UI Builder&lt;/strong&gt; in the left sidebar&lt;/li&gt;&#xA;&lt;li&gt;Open your dashboard page&lt;/li&gt;&#xA;&lt;li&gt;Add a new container to your dashboard&lt;/li&gt;&#xA;&lt;li&gt;Add a heading component with the text &amp;ldquo;Inventory Analysis&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Add a button component labeled &amp;ldquo;Analyze Inventory&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Configure the button&amp;rsquo;s onClick event:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select &amp;ldquo;Run API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Choose your &amp;ldquo;InventoryAnalysis&amp;rdquo; API&lt;/li&gt;&#xA;&lt;li&gt;For the success action, select &amp;ldquo;Update State&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set the state key to &amp;ldquo;inventoryAnalysis&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add a text component below the button&lt;/li&gt;&#xA;&lt;li&gt;Configure the text component to display the analysis:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set the content to &lt;code&gt;{{state.inventoryAnalysis.steps.AnalyzeInventory.body}}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Enable markdown rendering&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add a loading state to improve user experience&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;::alert[Superblocks&amp;rsquo; state management system makes it easy to store and display API results. The state is reactive, so your UI will automatically update when the data changes.]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating Plotly Visualization APIs</title>
      <link>//localhost:1313/4_modulefour_backend/04_plotlyapis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/4_modulefour_backend/04_plotlyapis.html</guid>
      <description>&lt;h1 id=&#34;creating-plotly-visualization-apis&#34;&gt;Creating Plotly Visualization APIs&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create two interactive Plotly charts: a location-based sales chart and a monthly trends visualization.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-create-location-sales-chart&#34;&gt;Step 1: Create Location Sales Chart&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Open API Builder:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Press CMD/CTRL + U&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create the API:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Add new API&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Select your database integration&lt;/li&gt;&#xA;&lt;li&gt;Click the pen icon next to &amp;lsquo;API1&amp;rsquo; and rename it to &amp;ldquo;location_chart&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Add your query:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; location_name, &lt;span style=&#34;color:#66d9ef&#34;&gt;SUM&lt;/span&gt;(total_amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; total_sales&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dm_operations.sales&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; location_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; total_sales &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Add a Python Function Step and add the below code:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating the Body Section</title>
      <link>//localhost:1313/3_modulethree_frontend/04_bodysection.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/3_modulethree_frontend/04_bodysection.html</guid>
      <description>&lt;h1 id=&#34;creating-the-body-section&#34;&gt;Creating the Body Section&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create the main dashboard layout with a data table and charts.&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-set-up-the-layout&#34;&gt;Step 1: Set Up the Layout&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create the section:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a new section (adds a column automatically)&lt;/li&gt;&#xA;&lt;li&gt;Set section height to &amp;ldquo;Fill Viewport&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Configure the column:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set layout to &amp;ldquo;Horizontal&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-2-add-containers&#34;&gt;Step 2: Add Containers&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Left container (for table):&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a container component&lt;/li&gt;&#xA;&lt;li&gt;Width will be &amp;ldquo;Fluid&amp;rdquo; (¾ of section)&lt;/li&gt;&#xA;&lt;li&gt;Set layout to &amp;ldquo;Vertical&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set height to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Right container (for charts):&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a container component&lt;/li&gt;&#xA;&lt;li&gt;Set width to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set layout to &amp;ldquo;Vertical&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;Set height to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-3-add-the-table&#34;&gt;Step 3: Add the Table&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;In the left container:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a Table component&lt;/li&gt;&#xA;&lt;li&gt;Set height to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Simplify the table:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the default header&lt;/li&gt;&#xA;&lt;li&gt;Remove the search bar&lt;/li&gt;&#xA;&lt;li&gt;Remove the download button&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;step-4-add-charts&#34;&gt;Step 4: Add Charts&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;In the right container:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add two chart components&lt;/li&gt;&#xA;&lt;li&gt;Set both heights to &amp;ldquo;Fill Parent&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;The &amp;ldquo;Fill Parent&amp;rdquo; and &amp;ldquo;Fill Viewport&amp;rdquo; settings ensure your components use the available space effectively and create a responsive layout.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On-Premise Agent (Optional)</title>
      <link>//localhost:1313/2_moduletwo_preqandsetup/04_opalocal.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/2_moduletwo_preqandsetup/04_opalocal.html</guid>
      <description>&lt;h1 id=&#34;local-on-premise-agent-opa-setup&#34;&gt;Local On-Premise Agent (OPA) Setup&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The On-Premise Agent (OPA) allows you to securely execute queries and access local services during development. When running locally, the OPA:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Runs as a Docker container on your machine&lt;/li&gt;&#xA;&lt;li&gt;Provides secure access to local databases and services&lt;/li&gt;&#xA;&lt;li&gt;Maintains data privacy by processing requests within your environment&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//localhost:1313/images/local-opa-deployment.png?width=45pc&#34; alt=&#34;Local OPA Deployment&#34;&gt;&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;The On-Premise Agent is optional for this workshop and can be skipped.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before starting, ensure you have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bedrock Module Summary</title>
      <link>//localhost:1313/5_modulefive_bedrock/07_bedrocksummary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/5_modulefive_bedrock/07_bedrocksummary.html</guid>
      <description>&lt;h2 id=&#34;aws-bedrock-integration-summary&#34;&gt;AWS Bedrock Integration Summary&lt;/h2&gt;&#xA;&lt;p&gt;Congratulations! You&amp;rsquo;ve successfully integrated AWS Bedrock with your Superblocks application to create powerful AI-enhanced features:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Inventory Analysis&lt;/strong&gt; 📦: Automated insights about inventory status and reordering needs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Natural Language Queries&lt;/strong&gt; 💬: A user-friendly interface for exploring sales data&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Predictive Analytics&lt;/strong&gt; 🔮: Forward-looking inventory forecasts to prevent stockouts&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Conversational Assistant&lt;/strong&gt; 🤖: A business assistant that helps users interact with data&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;key-takeaways&#34;&gt;Key Takeaways&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Simplified AI Integration&lt;/strong&gt;: Superblocks makes it easy to connect to AWS Bedrock without deep ML expertise&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Business Value&lt;/strong&gt;: These AI features provide actionable insights that drive better business decisions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Development Efficiency&lt;/strong&gt;: What would typically take weeks or months to build was accomplished in hours&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Customizability&lt;/strong&gt;: The patterns you&amp;rsquo;ve learned can be applied to many different business scenarios&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;::alert[The combination of AWS Bedrock and Superblocks enables you to build sophisticated AI features with minimal code, making advanced AI capabilities accessible to developers of all skill levels.]{header=&amp;ldquo;Important&amp;rdquo; type=&amp;ldquo;info&amp;rdquo;}&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
